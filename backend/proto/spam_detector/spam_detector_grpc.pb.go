// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: spam_detector.proto

package spam_detector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SpamDetector_Scan_FullMethodName = "/spam_detector.SpamDetector/Scan"
)

// SpamDetectorClient is the client API for SpamDetector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpamDetectorClient interface {
	// Scan - Scans a post's content to verify if is ham or spam
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error)
}

type spamDetectorClient struct {
	cc grpc.ClientConnInterface
}

func NewSpamDetectorClient(cc grpc.ClientConnInterface) SpamDetectorClient {
	return &spamDetectorClient{cc}
}

func (c *spamDetectorClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error) {
	out := new(ScanResponse)
	err := c.cc.Invoke(ctx, SpamDetector_Scan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpamDetectorServer is the server API for SpamDetector service.
// All implementations must embed UnimplementedSpamDetectorServer
// for forward compatibility
type SpamDetectorServer interface {
	// Scan - Scans a post's content to verify if is ham or spam
	Scan(context.Context, *ScanRequest) (*ScanResponse, error)
	mustEmbedUnimplementedSpamDetectorServer()
}

// UnimplementedSpamDetectorServer must be embedded to have forward compatible implementations.
type UnimplementedSpamDetectorServer struct {
}

func (UnimplementedSpamDetectorServer) Scan(context.Context, *ScanRequest) (*ScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedSpamDetectorServer) mustEmbedUnimplementedSpamDetectorServer() {}

// UnsafeSpamDetectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpamDetectorServer will
// result in compilation errors.
type UnsafeSpamDetectorServer interface {
	mustEmbedUnimplementedSpamDetectorServer()
}

func RegisterSpamDetectorServer(s grpc.ServiceRegistrar, srv SpamDetectorServer) {
	s.RegisterService(&SpamDetector_ServiceDesc, srv)
}

func _SpamDetector_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpamDetectorServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpamDetector_Scan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpamDetectorServer).Scan(ctx, req.(*ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpamDetector_ServiceDesc is the grpc.ServiceDesc for SpamDetector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpamDetector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spam_detector.SpamDetector",
	HandlerType: (*SpamDetectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scan",
			Handler:    _SpamDetector_Scan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spam_detector.proto",
}
